package com.org.threads.prodconsumer.lock;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class ProducerConsumerImpl {
	
	private static final int CAPACITY = 10;
    private final Queue queue = new LinkedList<>();
    private final Random theRandom = new Random();
    
 // lock and condition variables 
    private final Lock aLock = new ReentrantLock(); 
    private final Condition bufferNotFull = aLock.newCondition(); 
    private final Condition bufferNotEmpty = aLock.newCondition();
    
    public void put() throws InterruptedException{
    	try{
    		
    		while(queue.size()== CAPACITY){
    			System.out.println(Thread.currentThread().getName() + " : Buffer is full, waiting");
    			
    			bufferNotEmpty.await();
    			
    		}
    		
    		int number = theRandom.nextInt(); 
    		boolean isAdded = queue.offer(number);
    		if(isAdded){
    			
    			System.out.printf("%s added %d into queue %n", Thread .currentThread().getName(), number);

    			bufferNotFull.signalAll();
    		}

    		
    	}
    	finally{
    		
    	}
    }
    
    
}