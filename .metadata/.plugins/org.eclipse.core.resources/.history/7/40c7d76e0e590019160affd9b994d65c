package com.org.impl;

import javax.print.event.PrintJobAttributeListener;

public class LinkedListImpl {
	
	Node head;
	
	static class Node{
		int data;
		Node next;
		
		Node(int data){
			this.data=data;
			next = null;
		}
	}
	
	public void push(int data){
		
		Node newNode = new Node(data);
		newNode.next = head;
		head = newNode;
		
	}
	
	public void pushAfterNode(int data, Node prevNode){
		
		Node newNode = new Node(data);
		newNode.next = prevNode.next;
		prevNode.next = newNode;
		
	}
	
	public void pushEndNode(int data){
		
		Node newNode = new Node(data);
		
		if(head==null) {
			
			head = newNode;
		}
		else {
		Node last = head;
		while(last.next != null) {
			last = last.next;
			
		}
		
		last.next = newNode;		
		}
	}
	
	public void delete(int key){
		Node temp = head;
		Node prev=null;
		
		if(temp !=null && temp.data==key){
			head=temp.next;
			return;
		}
		
		while(temp != null && temp.data != key) {
			prev = temp;
			temp = temp.next;
		}
		
		if(temp==null){
			return;
		}
	
		prev.next = temp.next;
		
	}
	
	void deleteNode(int position) 
    { 
        // If linked list is empty 
        if (head == null) 
            return; 
  
        // Store head node 
        Node temp = head; 
  
        // If head needs to be removed 
        if (position == 0) 
        { 
            head = temp.next;   // Change head 
            return; 
        } 
  
        // Find previous node of the node to be deleted 
        for (int i=0; temp!=null && i<position-1; i++) 
            temp = temp.next; 
  
        // If position is more than number of ndoes 
        if (temp == null || temp.next == null) 
            return; 
  
        // Node temp->next is the node to be deleted 
        // Store pointer to the next of node to be deleted 
        Node next = temp.next.next; 
  
        temp.next = next;  // Unlink the deleted node from list 
    } 
	
	
	void deleteList(){
		head = null ;
	}
	
	public static void main(String[] args){
		LinkedListImpl list = new LinkedListImpl();
		
		
//		list.head = new Node(1);
//		Node nodeTwo = new Node(2);
//		Node nodeThree = new Node(3);
//		
//		list.head.next = nodeTwo;
//		nodeTwo.next = nodeThree;	
		list.push(2);
		list.push(3);
		list.push(4);
		list.push(5);
		
//		list.pushEndNode(1);
//		list.pushEndNode(2);
//		list.pushEndNode(3);
		
		
		list.printList(list);
		
		list.deleteNode(2);
		list.printList(list);
	}
	
	public void printList(LinkedListImpl list){
		Node tnode = head; 
		while(tnode!=null){
			System.out.println(tnode.data);
//			if(list.head.data == 2){
//				list.pushAfterNode(4, list.head);
//			}
			tnode = tnode.next;				
		}
	}
	
	

}
